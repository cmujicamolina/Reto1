{
	"info": {
		"_postman_id": "45d8acf3-9c70-4d2d-95c5-0a54fd66d72b",
		"name": "RETO1-ChristianMujica-collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "14488909",
		"_collection_link": "https://speeding-firefly-224859.postman.co/workspace/LiteThinking~a2fb3b4b-3152-4f51-b265-2669e4adfe44/collection/14488909-45d8acf3-9c70-4d2d-95c5-0a54fd66d72b?action=share&source=collection_link&creator=14488909"
	},
	"item": [
		{
			"name": "Usuarios",
			"item": [
				{
					"name": "users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = {",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
									"  \"title\": \"Generated schema for Root\",",
									"  \"type\": \"array\",",
									"  \"items\": {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"      \"id\": {",
									"        \"type\": \"number\"",
									"      },",
									"      \"name\": {",
									"        \"type\": \"string\"",
									"      },",
									"      \"username\": {",
									"        \"type\": \"string\"",
									"      },",
									"      \"email\": {",
									"        \"type\": \"string\"",
									"      },",
									"      \"address\": {",
									"        \"type\": \"object\",",
									"        \"properties\": {",
									"          \"street\": {",
									"            \"type\": \"string\"",
									"          },",
									"          \"suite\": {",
									"            \"type\": \"string\"",
									"          },",
									"          \"city\": {",
									"            \"type\": \"string\"",
									"          },",
									"          \"zipcode\": {",
									"            \"type\": \"string\"",
									"          },",
									"          \"geo\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"              \"lat\": {",
									"                \"type\": \"string\"",
									"              },",
									"              \"lng\": {",
									"                \"type\": \"string\"",
									"              }",
									"            },",
									"            \"required\": [",
									"              \"lat\",",
									"              \"lng\"",
									"            ]",
									"          }",
									"        },",
									"        \"required\": [",
									"          \"street\",",
									"          \"suite\",",
									"          \"city\",",
									"          \"zipcode\",",
									"          \"geo\"",
									"        ]",
									"      },",
									"      \"phone\": {",
									"        \"type\": \"string\"",
									"      },",
									"      \"website\": {",
									"        \"type\": \"string\"",
									"      },",
									"      \"company\": {",
									"        \"type\": \"object\",",
									"        \"properties\": {",
									"          \"name\": {",
									"            \"type\": \"string\"",
									"          },",
									"          \"catchPhrase\": {",
									"            \"type\": \"string\"",
									"          },",
									"          \"bs\": {",
									"            \"type\": \"string\"",
									"          }",
									"        },",
									"        \"required\": [",
									"          \"name\",",
									"          \"catchPhrase\",",
									"          \"bs\"",
									"        ]",
									"      }",
									"    },",
									"    \"required\": [",
									"      \"id\",",
									"      \"name\",",
									"      \"username\",",
									"      \"email\",",
									"      \"address\",",
									"      \"phone\",",
									"      \"website\",",
									"      \"company\"",
									"    ]",
									"  }",
									"};",
									"",
									"pm.test('Schema is valid', function() {",
									"  pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Status code is 200\", () => {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Status code name has string\", () => {",
									"  pm.response.to.have.status(\"OK\");",
									"});",
									"",
									"pm.test(\"Username\", () => {",
									"  const responseJson = pm.response.json();  ",
									"  pm.expect(responseJson[0].username).to.be.a('string');",
									"  pm.expect(responseJson[0].username).to.include(\"Bret\");",
									"});",
									"",
									"pm.test(\"Address - Street\", () => {",
									"  const responseJson = pm.response.json();  ",
									"  pm.expect(responseJson[0].address.street).to.be.a('string');",
									"  pm.expect(responseJson[0].address.street).to.include(\"Kulas\");",
									"});",
									"",
									"pm.test(\"Address - City\", () => {",
									"  const responseJson = pm.response.json();  ",
									"  pm.expect(responseJson[0].address.city).to.be.a('string');",
									"  pm.expect(responseJson[0].address.city).to.include(\"Gwen\");",
									"});",
									"",
									"pm.test(\"Response time is less than 800ms\", () => {",
									"  pm.expect(pm.response.responseTime).to.be.below(800);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://jsonplaceholder.typicode.com/users",
							"protocol": "https",
							"host": [
								"jsonplaceholder",
								"typicode",
								"com"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Comentarios",
			"item": [
				{
					"name": "comments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = {",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
									"  \"title\": \"Generated schema for Root\",",
									"  \"type\": \"array\",",
									"  \"items\": {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"      \"postId\": {",
									"        \"type\": \"number\"",
									"      },",
									"      \"id\": {",
									"        \"type\": \"number\"",
									"      },",
									"      \"name\": {",
									"        \"type\": \"string\"",
									"      },",
									"      \"email\": {",
									"        \"type\": \"string\"",
									"      },",
									"      \"body\": {",
									"        \"type\": \"string\"",
									"      }",
									"    },",
									"    \"required\": [",
									"      \"postId\",",
									"      \"id\",",
									"      \"name\",",
									"      \"email\",",
									"      \"body\"",
									"    ]",
									"  }",
									"}",
									"",
									"pm.test('Schema is valid', function() {",
									"  pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Status code is 200\", () => {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Status code name has string\", () => {",
									"  pm.response.to.have.status(\"OK\");",
									"});",
									"",
									"pm.test(\"Name\", () => {",
									"  const responseJson = pm.response.json();  ",
									"  pm.expect(responseJson[0].name).to.be.a('string');",
									"  pm.expect(responseJson[0].name).to.include(\"labore\");",
									"});",
									"",
									"pm.test(\"Email\", () => {",
									"  const responseJson = pm.response.json();  ",
									"  pm.expect(responseJson[0].email).to.be.a('string');",
									"  pm.expect(responseJson[0].email).to.include(\"Eliseo\");",
									"});",
									"",
									"pm.test(\"Body\", () => {",
									"  const responseJson = pm.response.json();  ",
									"  pm.expect(responseJson[0].body).to.be.a('string');",
									"  pm.expect(responseJson[0].body).to.include(\"enim\");",
									"});",
									"",
									"pm.test(\"Response time is less than 900ms\", () => {",
									"  pm.expect(pm.response.responseTime).to.be.below(900);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://jsonplaceholder.typicode.com/comments",
							"protocol": "https",
							"host": [
								"jsonplaceholder",
								"typicode",
								"com"
							],
							"path": [
								"comments"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}